import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

def my_map(challenges):
    n_samples = challenges.shape[0]
    feature_vectors = np.zeros((n_samples, 64))
    
    for i in range(32):
        feature_vectors[:, 2*i] = 1 - challenges[:, i]
        feature_vectors[:, 2*i + 1] = challenges[:, i]
    
    return feature_vectors

def my_fit(challenges, response0, response1):
    # Map the challenges to new feature vectors
    mapped_features = my_map(challenges)

    # Train logistic regression models
    model0 = LogisticRegression(max_iter=1000)
    model0.fit(mapped_features, response0)

    model1 = LogisticRegression(max_iter=1000)
    model1.fit(mapped_features, response1)

    # Extract weights and biases
    W0, b0 = model0.coef_[0], model0.intercept_[0]
    W1, b1 = model1.coef_[0], model1.intercept_[0]

    return W0, b0, W1, b1

